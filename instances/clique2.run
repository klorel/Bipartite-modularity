reset;

# option gentimes 1;
# option presolve 0;
suffix lazy IN;
include solver.inc;

include clique2.mod;

# pour la trace

# data divorces.dat;
# data wafa.dat;
# data SocialWorkJ.dat;
# data SupremeCourtnot.dat;
# reset data;
# data SupremeCourtyes.dat;
# data south.dat;
# data scotl.dat;
# data netscience.dat;

# option xpress_options "outlev=1 symmetry=0 cutstrategy=0";

param id 						:= include id.inc;
param name 			symbolic 	:= include name.inc;
param formulation 	symbolic 	:= include formulation.inc;
param run  			symbolic 	:= include run.inc;

printf "clique2 %s %s %s\n", name, formulation, run;
# reset data lazy;
# expand;

# data "dat/wafa.dat";
# data "dat/south.dat";
data ("dat/"&name & ".dat");

let{(ir,ib,jr,jb) in RB2}ctr1[ir,ib,jr,jb].lazy:=1;
let{(ir,ib,jr,jb) in RB2}ctr2[ir,ib,jr,jb].lazy:=1;
let{(ir,ib,jr,jb) in RB2}ctr3[ir,ib,jr,jb].lazy:=1;
let{(ir,ib,jr,jb) in RB2}ctr4[ir,ib,jr,jb].lazy:=1;


# let{(ir,ib,jr,jb) in Set1}ctr1[ir,ib,jr,jb].lazy:=1;
# let{(ir,ib,jr,jb) in Set2}ctr2[ir,ib,jr,jb].lazy:=1;
# let{(ir,ib,jr,jb) in Set3}ctr3[ir,ib,jr,jb].lazy:=1;
# let{(ir,ib,jr,jb) in Set4}ctr4[ir,ib,jr,jb].lazy:=1;

# display RB2;
param solverTime;
param nbNodes;

# write gtoto;
# write mtoto;
# solve modularity;
if (run=="ALL") then{
	include clique2_solve.run;
}else{
	include clique2_solve_dyn.run;
}

# display _solve_elapsed_time;
# display num0(sub(solve_message, '@*^([0-9]+) branch@*', '\1'));
# display card({(ir, ib, jr, jb) in RB2});
# display card({(ir, ib, jr, jb) RB cross RB : cut1[ir, ib, jr, jb]>2});
# display card({(ir, ib, jr, jb) RB cross RB : cut2[ir, ib, jr, jb]>2});
# display card({(ir, ib, jr, jb) RB cross RB : cut3[ir, ib, jr, jb]>2});
# display card({(ir, ib, jr, jb) RB cross RB : cut4[ir, ib, jr, jb]>2});
display solverTime;
