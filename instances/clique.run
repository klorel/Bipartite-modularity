reset;

# option gentimes 1;
# option presolve 0;
suffix lazy IN;

include solver.inc;

include clique.mod;

param id 						:= include id.inc;
param name 			symbolic 	:= include name.inc;
param formulation 	symbolic 	:= include formulation.inc;
param run  			symbolic 	:= include run.inc;

display id, name, formulation, run;

param location{1..n};
set un_coloried ordered ;
param noeud;
param nC;

param nbNodes;
param solverTime;
# exit;
printf "clique %s %s %s\n", name, formulation, run;
# reset data lazy;
# expand;
let KindOfN := formulation;
data ("dat/"&name & ".dat");
let{(i,j) in V2} x[i,j] := 0;

# display KindOfN;

# let{(i,k,j) in Set1} ctr1[i,k,j].lazy := if( j in Neighbor1[i] inter Neighbor1[k]) then 0 else 1;
# let{(j,k,i) in Set2} ctr2[j,k,i].lazy := if( i in Neighbor1[j] inter Neighbor1[k]) then 0 else 1;
# let{(i,j,k) in Set3} ctr3[i,j,k].lazy := if( k in Neighbor1[i] inter Neighbor1[j]) then 0 else 1;

let{(i,k,j) in Set1} ctr1[i,k,j].lazy := 1;
let{(j,k,i) in Set2} ctr2[j,k,i].lazy := 1;
let{(i,j,k) in Set3} ctr3[i,j,k].lazy := 1;

# solve modularity;
if (run=="ALL") then{
	include clique_solve.run;
}else{
	include clique_solve_dyn.run;
}

# break
# option gentime 1;
include build_solution.run;
# display x;
printf ""> ("sol/"&name&"_"&formulation&"_"&run&".sol");
printf{i in 1..n} "%6d\n", location[i]>>  ("sol/"&name&"_"&formulation&"_"&run&".sol");
printf "%10d;%20s;%10d;%10d;%10d;%10d;%10f;%10d;%10f;%10s;%10d;%10d;%10d;%10d;%10d;%10s;\n",
	id,
	name,
	n,
	p,
	m,
	nC,
	modularity,
	nbNodes,
	solverTime,
	formulation,
	card({(i,j) in V2, k in V : j<k and x[i,j] and x[j,k] and not x[i,k]}),
	card({(i,j) in V2 : x[i,j].astatus=="in"}),
	card(V2),
	card({(i,k,j) in Set1 : ctr1[i,k,j].astatus=="in"})+
	card({(j,k,i) in Set2 : ctr2[j,k,i].astatus=="in"})+
	card({(i,j,k) in Set3 : ctr3[i,j,k].astatus=="in"}),
	card(Set1)+card(Set2)+card(Set3),
	run
	>>  result.csv;

# printf "%s", solve_message > "solve_message.txt";

# display sub(solve_message, '@*^([0-9]+) branch@*', '\1');
# display sub(solve_message, '@*^([0-9]+) relmipgap*', '\1');

# display num0(sub(solve_message, '@*^([0-9]+) relmipgap@*', '\1'));